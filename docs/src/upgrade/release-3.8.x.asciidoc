////
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
////

= TinkerPop 3.8.0

image::https://raw.githubusercontent.com/apache/tinkerpop/master/docs/static/images/gremlin-running.png[width=185]

*NOT OFFICIALLY NAMED YET*

== TinkerPop 3.8.0

*Release Date: NOT OFFICIALLY RELEASED YET*

Please see the link:https://github.com/apache/tinkerpop/blob/3.8.0/CHANGELOG.asciidoc#release-3-8-0[changelog] for a
complete list of all the modifications that are part of this release.

=== Upgrading for Users

==== Simplification to g creation
The creation of "g" is the start point to writing Gremlin. There are a number of ways to create it, but TinkerPop has
long recommended the use of the anonymous `traversal()` function for this creation.
[source,groovy]
----
// for embedded cases
graph = TinkerGraph.open()
g = traversal().withEmbedded(graph)
// for remote cases
g = traversal().withRemote(DriverRemoteConnection.using(...)))
----
As of this release, those two methods have been deprecated in favor of just `with()` which means you could simply write:
[source,groovy]
----
// for embedded cases
graph = TinkerGraph.open()
g = traversal().with(graph)
// for remote cases
g = traversal().with(DriverRemoteConnection.using(...)))
----
That's a bit less to type, but also removes need to programmatically decide which function to call which hopefully
strengthens the abstraction further. To demonstrate this further consider this next example:
[source,groovy]
----
g = traversal().with("config.properties")
----
The properties file in the above example can either point to a remote configuration or a embedded configuration allowing
"g" to be switched as needed without code changes.
See: link:https://issues.apache.org/jira/browse/TINKERPOP-3017[TINKERPOP-3017]

==== Splitting a string into characters using split()
The `split()` step will now split a string into a list of its characters if the given separator is an empty string.
[source,groovy]
----
// previous implementation
g.inject("Hello").split("")
==>[Hello]
// new implementation
g.inject("Hello").split("")
==>[H,e,l,l,o]
----
See: link:https://issues.apache.org/jira/browse/TINKERPOP-3083[TINKERPOP-3083]

=== Upgrading for Providers

==== Graph System Providers

==== Graph Driver Providers
